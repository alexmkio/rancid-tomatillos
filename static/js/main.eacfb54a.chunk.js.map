{"version":3,"sources":["components/poster/Poster.js","components/posters/Posters.js","components/movie_details/MovieDetails.js","httpResponses.js","components/error_code/ErrorCode.js","apiCalls.js","utilities.js","components/app/App.js","index.js"],"names":["Poster","photo","id","title","className","src","alt","Posters","movies","placeholderPosterCards","map","number","posterCards","movie","to","poster_path","length","MovieDetails","componentDidMount","props","fetch","render","genres","genre","indexOf","runtime","tagline","budget","revenue","backdrop_path","overview","release_date","average_rating","onClick","clearSelected","Component","httpResponses","ErrorCode","code","response","find","parseInt","message","description","getApiData","endPoint","a","ok","Error","status","json","data","cleanData","urlEndPoint","backdrop","includes","Math","round","toLocaleString","App","property","fetchedData","setState","errorCode","selectedMovie","exact","path","state","match","params","router","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.eacfb54a.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport './Poster.css';\n\nconst Poster = ({photo, id, title}) => {\n  if (photo) {\n    return (\n      <img\n        className='poster-image'\n        id={id}\n        src={photo}\n        alt={title}\n      />\n    )\n  }\n  return (\n    <div className='poster-image placeholder-height'>\n    </div>\n  )\n}\n\nexport default Poster;\n\nPoster.propTypes = {\n  photo: PropTypes.string,\n  id: PropTypes.number,\n  title: PropTypes.string\n};\n","import { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Poster from '../poster/Poster';\nimport './Posters.css';\n\nconst Posters = ({movies}) => {\n  let placeholderIDs = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 ]\n  const placeholderPosterCards = placeholderIDs.map(number => {\n    return (\n      <Poster key={number}/>\n    )\n  })\n\n  let posterCards = []\n  if (movies) {\n    posterCards = movies.map(movie => {\n      return (\n        <Link to={`${movie.id}`} key={movie.id}>\n          <Poster\n            key={movie.id}\n            id={movie.id}\n            photo={movie.poster_path}\n            title={movie.title}\n          />\n        </Link>\n      )\n    })\n  }\n\n  return (\n    <>\n      <h2>Featured Films</h2>\n      <section className='poster-container'>\n        {posterCards.length ? posterCards : placeholderPosterCards}\n      </section>\n    </>\n  )\n}\n\nexport default Posters;\n\nPosters.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.object)\n};","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport './MovieDetails.css';\n\nclass MovieDetails extends Component {\n  componentDidMount = () => {\n    this.props.fetch(`movies/${this.props.id}`, 'selectedMovie')\n  }\n\n  render = () => {\n    if (!this.props.movie.title) {\n      return (\n        <h3>Loading Movie Details</h3>\n      )\n    } else {\n      let movie = this.props.movie;\n      let genres = movie.genres.map(genre => <dd key={movie.genres.indexOf(genre)} className='genre'>{genre}</dd>);\n      let genre = !movie.genres.length ? null : (\n        <>\n          <dt>Genre</dt>\n          {genres}\n        </>\n      );\n      let runtime = !movie.runtime ? null : (\n        <>\n          <dt>Runtime</dt>\n          <dd>{movie.runtime} minutes</dd>\n        </>\n      );\n      let tagline = !movie.tagline ? null : <dd className='tagline'>\"{movie.tagline}\"</dd>;\n      let budget = movie.budget === '0' ? null : (\n        <>\n          <dt>Budget</dt>\n          <dd>${movie.budget}</dd>\n        </>\n      );\n      let revenue = movie.revenue === '0' ? null : (\n        <>\n          <dt>Revenue</dt>\n          <dd>${movie.revenue}</dd>\n        </>\n      );\n      return (\n        <section className='details-container'>\n          <img className='detail-background' src={movie.backdrop_path} alt=''/>\n          <div className='detail-info'>\n            <dl>\n              <h2 className='detail-title'>{movie.title}</h2>\n              {tagline}\n              <dd>{movie.overview}</dd>\n              {genre}\n              {runtime}\n              <dt>Release Date</dt>\n              <dd>{movie.release_date}</dd>\n              <dt>Average User Rating</dt>\n              <dd>{movie.average_rating}</dd>\n              {budget}\n              {revenue}\n            </dl>\n            <Link to='/' >\n              <button className='details-back' onClick={this.props.clearSelected}>Back</button>\n            </Link>\n          </div>\n        </section>\n      )\n    }\n  }\n}\n\nexport default MovieDetails;\n\nMovieDetails.propTypes = {\n  id: PropTypes.string.isRequired,\n  fetch: PropTypes.func.isRequired,\n  movie: PropTypes.object,\n  clearSelected: PropTypes.func\n};\n","const httpResponses = [\n  {\n    \"code\": 301,\n    \"message\": \"Moved Permanently\",\n    \"description\": \"The URL of the requested resource has been changed permanently. The new URL is given in the response.\",\n  },\n  {\n    \"code\": 401,\n    \"message\": \"Unauthorized\",\n    \"description\": `Although the HTTP standard specifies \"unauthorized\", semantically this response means \"unauthenticated\". That is, the client must authenticate itself to get the requested response.`,\n  },\n  {\n    \"code\": 403,\n    \"message\": \"Forbidden\",\n    \"description\": \"The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401, the client's identity is known to the server.\",\n  },\n  {\n    \"code\": 404,\n    \"message\": \"Not Found\",\n    \"description\": \"The server can not find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurrence on the web.\",\n  },\n  {\n    \"code\": 408,\n    \"message\": \"Request Timeout\",\n    \"description\": \"This response is sent on an idle connection by some servers, even without any previous request by the client. It means that the server would like to shut down this unused connection. This response is used much more since some browsers, like Chrome, Firefox 27+, or IE9, use HTTP pre-connection mechanisms to speed up surfing. Also note that some servers merely shut down the connection without sending this message.\",\n  },\n  {\n    \"code\": 429,\n    \"message\": \"Too Many Requests\",\n    \"description\": `The user has sent too many requests in a given amount of time (\"rate limiting\").`,\n  },\n  {\n    \"code\": 500,\n    \"message\": \"Internal Server Error\",\n    \"description\": \"The server has encountered a situation it doesn't know how to handle.\",\n  },\n  {\n    \"code\": 502,\n    \"message\": \"Bad Gateway\",\n    \"description\": \"This error response means that the server, while working as a gateway to get a response needed to handle the request, got an invalid response.\",\n  },\n  {\n    \"code\": 503,\n    \"message\": \"Service Unavailable\",\n    \"description\": \"The server is not ready to handle the request. Common causes are a server that is down for maintenance or that is overloaded. Note that together with this response, a user-friendly page explaining the problem should be sent. This response should be used for temporary conditions and the Retry-After: HTTP header should, if possible, contain the estimated time before the recovery of the service. The webmaster must also take care about the caching-related headers that are sent along with this response, as these temporary condition responses should usually not be cached.\",\n  },\n  {\n    \"code\": 504,\n    \"message\": \"Gateway Timeout\",\n    \"description\": \"This error response is given when the server is acting as a gateway and cannot get a response in time.\",\n  }\n]\n\nexport default httpResponses;","import { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport './ErrorCode.css';\nimport httpResponses from '../../httpResponses';\n\nconst ErrorCode = ({code, clearSelected}) => {\n  let response = httpResponses.find(response => response.code === parseInt(code))\n  return (\n    <article className='error-container'>\n      <div className='error-div'>\n        <h2 className='error-h2'>Error {response.code}</h2>\n        <h3>{response.message}</h3>\n        <p>{response.description}</p>\n        <Link to='/'>\n          <button className='details-back' onClick={clearSelected}>Back</button>\n        </Link>\n      </div>\n    </article>\n  )\n}\n\nexport default ErrorCode;\n\nErrorCode.propTypes = {\n  code: PropTypes.string.isRequired,\n  clearSelected: PropTypes.func\n};","export const getApiData = async (endPoint) => {\n  let response = await fetch(`https://rancid-tomatillos.herokuapp.com/api/v2/${endPoint}`);\n  if (!response.ok) {\n    throw new Error(response.status);\n  }\n  let data = await response.json();\n  return data;\n};\n","export const cleanData = (urlEndPoint, data) => {\n  if (urlEndPoint.includes('/')) {\n    let backdrop\n    if (data.movie.backdrop_path === 'https://www.esm.rochester.edu/uploads/NoPhotoAvailable.jpg') {\n      backdrop = 'https://www.officespacesny.com/wp-content/themes/realestate-7/images/no-image.png'\n    } else {\n      backdrop = data.movie.backdrop_path\n    }\n    return {\n      average_rating: Math.round(data.movie.average_rating * 100) / 100,\n      backdrop_path: backdrop,\n      budget: data.movie.budget.toLocaleString('en-US'),\n      genres: data.movie.genres,\n      overview: data.movie.overview,\n      release_date: data.movie.release_date,\n      revenue: data.movie.revenue.toLocaleString('en-US'),\n      runtime: data.movie.runtime,\n      tagline: data.movie.tagline,\n      title: data.movie.title\n    }\n  } else {\n    return data.movies.map(movie => {\n      return {\n        id: movie.id,\n        poster_path: movie.poster_path,\n        title: movie.title\n      }\n    })\n  }\n};\n","import React, { Component } from 'react';\nimport Posters from '../posters/Posters';\nimport MovieDetails from '../movie_details/MovieDetails';\nimport ErrorCode from '../error_code/ErrorCode';\nimport { getApiData } from '../../apiCalls';\nimport { cleanData } from '../../utilities';\nimport './App.css';\nimport { Route } from 'react-router-dom';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      movies: [],\n      errorCode: null,\n      selectedMovie: {}\n    }\n  }\n\n  componentDidMount = () => {\n    this.fetch('movies', 'movies')\n  }\n\n  fetch = async (endPoint, property) => {\n    try {\n      const fetchedData = await getApiData(endPoint);\n      this.setState({[property]: cleanData(endPoint, fetchedData)});\n    } catch (e) {\n      this.setState({errorCode: e.message});\n    }\n  }\n\n  clearSelected = () => {\n    this.setState({\n      errorCode: null,\n      selectedMovie: {}\n    });\n  }\n\n  render = () => {\n    return (\n      <>\n        <header>\n          <h1>Rancid Tomatillos</h1>\n        </header>\n        <main>\n          <Route exact path='/' render={() => {\n            if (this.state.errorCode) {\n              return <ErrorCode code={this.state.errorCode} clearSelected={this.clearSelected}/>\n            } else if (!this.state.movies.length) {\n              return <Posters/>\n            } else {\n              return <Posters movies={this.state.movies}/>\n            }\n          }}/>\n          <Route exact path='/:id' render={({match}) => {\n            if (this.state.errorCode) {\n              return <ErrorCode code={this.state.errorCode} clearSelected={this.clearSelected}/>\n            } else if (!this.state.selectedMovie) {\n              return <MovieDetails\n                id={match.params.id}\n                fetch={this.fetch}\n              />\n            } else {\n              return <MovieDetails\n                id={match.params.id}\n                movie={this.state.selectedMovie}\n                clearSelected={this.clearSelected}\n                fetch={this.fetch}\n              />\n            }\n          }}/>\n        </main>\n      </>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport { HashRouter } from 'react-router-dom';\n\nconst router = <HashRouter> <App /> </HashRouter>;\n\nReactDOM.render(router, document.getElementById('root'));\n"],"sourceRoot":""}